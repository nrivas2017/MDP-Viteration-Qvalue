import pygame
from pygame.locals import *
import time,random

#---------------------------------------------------------------------
# VAR
#---------------------------------------------------------------------
nSIZE_Pos = 64
nPiso = 0
nObstaculo = 1
lGo = lp = lr = False
nX_M = nY_M = 21
nP_X = nP_Y = 0
t_inicio = 0


#---------------------------------------------------------------------
# ARRAY MAPA NAVEGACION 
#---------------------------------------------------------------------
aINICIO = [0,5]
aMETA   = [3,0]
aPos_R = [aINICIO[0],aINICIO[1]]     # Posicion Global (x,y) Robot en MAPA
aMAPA =  [
          [0,0,1,0],
          [0,0,0,0],
          [0,0,1,0],
          [1,0,0,0],
          [0,0,0,0],
          [0,0,0,0]
         ]       

aSTATE = [
          [0,1,2,3],
          [4,5,6,7],
          [8,9,10,11],
          [12,13,14,15],
          [16,17,18,19],
          [20,21,22,23]
         ]  

#---------------------------------------------------------------------
# MDP + VALUE ITERATION 
#---------------------------------------------------------------------
nITERA   = 10000
nESTADOS = 24
k        = 1
nError   = 0
nMax     = 0
nPos     = 0
y        = 0.98 # Factor Descuento
TresH    = 0.0001 # Treshold Error
#---------------------------------------------------------------------
# ARRAY MDP 
#---------------------------------------------------------------------

# Prob Trans. Accion 1 = (Robot Navega: Norte)
T1  =  [ #0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20    21  22   23
       [0.90,0.05,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.05,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.90,0.05,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.90,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.90,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.90,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.05,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.05,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.05],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.05,0.05]
       ]

# Prob Trans. Accion 2 = (Robot Navega: Sur)
T2  =  [ #0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20    21  22   23
       [0.05,0.05,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.05,0.05,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.05,0.05,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.90,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.90,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.90,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.90],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.90,0.05,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.90,0.05,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.90,0.05],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.05,0.90]
       ]

# Prob Trans. Accion 3 = (Robot Navega: Este)
T3  =  [ #0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20    21  22   23
       [0.05,0.90,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.05,0.90,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.05,0.90,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.05,0.90,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.05,0.00,0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.05,0.00,0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.05,0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.05,0.90,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.05,0.90,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.05,0.90],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.05,0.90]
       ]

# Prob Trans. Accion 1 = (Robot Navega: Oeste)
T4  =  [ #0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20    21  22   23
       [0.90,0.05,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.90,0.05,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.90,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.90,0.05,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.90,0.05,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.90,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.90,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.05,0.00,0.00,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.90,0.05,0.00,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.90,0.05,0.00,0.00,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.90,0.05,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.90,0.05,0.00,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.90,0.05,0.00],
       [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.90,0.05]
       ]


#        0    1     2    3   4    5    6    7    8    9    10    11   12   13   14   15   16   17   18   19   20   21   22   23
Rw   = [0.1, 0.1, -100, 10, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, -100, 0.1, -100, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1] # Reward del Estado (i) = {S0 - S20} = 24 Estados
JOpt = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] # Jota Optimo (J*)
nA   = [0,0,0,0] # Maximo Reward Esperado por la Accion
aP   = ['?','?','?','?','?','?','?','?','?','?','?','?','?','?','?','?','?','?','?','?','?','?','?','?'] # Accion a Tomar en Estado S(i)
cA   = ['N','S','E','O']
ik   = [] # Matriz de Iteracion...

#---------------------------------------------------------------------
# INIT VALUE ITERATION 
#---------------------------------------------------------------------
def Init_VI():
    for x in xrange(0,nITERA):
        ik.append([])  
        for i in xrange(nESTADOS): # 24 Estados
           ik[x].append(0)

    for i in xrange(nESTADOS):
        ik[0][i] = Rw[i]
    
    return 

#---------------------------------------------------------------------
# INIT VALUE ITERATION 
#---------------------------------------------------------------------
def Value_I():
    nV1 = nV2  = nV3 = nV4 = 0
    for k in xrange(1,nITERA):
        for s in xrange(0,nESTADOS):
            for j in xrange(0,nESTADOS):
                nV1 += T1[s][j]*ik[k-1][j]  
                nV2 += T2[s][j]*ik[k-1][j]
                nV3 += T3[s][j]*ik[k-1][j]
                nV4 += T4[s][j]*ik[k-1][j]
   
            nA[0] = Rw[s] + y*nV1
            nA[1] = Rw[s] + y*nV2
            nA[2] = Rw[s] + y*nV3
            nA[3] = Rw[s] + y*nV4
 
            ik[k][s] = max(nA)
            nV1 = 0; nV2 = 0; nV3 = 0; nV4 = 0
 
        # Calculo del Error.-
        nError = max(abs(ik[k][0]-ik[k-1][0]),abs(ik[k][1]-ik[k-1][1]),abs(ik[k][2]-ik[k-1][2]),abs(ik[k][3]-ik[k-1][3]),abs(ik[k][4]-ik[k-1][4]),abs(ik[k][5]-ik[k-1][5]),abs(ik[k][6]-ik[k-1][6]),abs(ik[k][7]-ik[k-1][7]),abs(ik[k][8]-ik[k-1][8]),abs(ik[k][9]-ik[k-1][9]),abs(ik[k][10]-ik[k-1][10]),abs(ik[k][11]-ik[k-1][11]),abs(ik[k][12]-ik[k-1][12]),abs(ik[k][13]-ik[k-1][13]),abs(ik[k][14]-ik[k-1][14]),abs(ik[k][15]-ik[k-1][15]),abs(ik[k][16]-ik[k-1][16]),abs(ik[k][17]-ik[k-1][17]),abs(ik[k][18]-ik[k-1][18]),abs(ik[k][19]-ik[k-1][19]),abs(ik[k][20]-ik[k-1][20]),abs(ik[k][21]-ik[k-1][21]),abs(ik[k][22]-ik[k-1][22]),abs(ik[k][23]-ik[k-1][23])) 

        # Condicion de termino de Iteracion.-
        if (nError < TresH):
            for i in xrange(0,nESTADOS):
                JOpt[i] = ik[k][i]
            break

 # Calculo de la Mejor Accion a tomar en los Estados S(i) segun JOptimo (J*).-
    for s in xrange(0,nESTADOS):
        for j in xrange(0,nESTADOS):
            nV1 += T1[s][j]*JOpt[j]  
            nV2 += T2[s][j]*JOpt[j]
            nV3 += T3[s][j]*JOpt[j]
            nV4 += T4[s][j]*JOpt[j]
   
        nA[0] = Rw[s] + y*nV1 # Accion 1-Norte
        nA[1] = Rw[s] + y*nV2 # Accion 2-Sur
        nA[2] = Rw[s] + y*nV3 # Accion 3-Este
        nA[3] = Rw[s] + y*nV4 # Accion 4-Oeste

        nV1 = 0; nV2 = 0; nV3 = 0; nV4 = 0 
 
        nMax = max(nA)
        nPos = nA.index(nMax)
        aP[s] = cA[nPos]
  
    return


# PINTA Nodos Inicio y Meta 
#---------------------------------------------------------------------
def Pinta_INI_META():
    scr.blit(img3,(aMETA[0]*nSIZE_Pos  ,aMETA[1]*nSIZE_Pos  ))
    return

#---------------------------------------------------------------------
# Carga imagenes y convierte formato pygame
#---------------------------------------------------------------------
def Load_Image(sFile,transp=False):
    image = pygame.image.load(sFile)
    image = image.convert()
    if transp:
       color = image.get_at((0,0))
       image.set_colorkey(color,RLEACCEL)
    return image

#---------------------------------------------------------------------
# Pinta MAPA segun aMAPA
#---------------------------------------------------------------------
def Pinta_aMAPA():
    nPos_X = 0 
    nPos_Y = 0
    for nF in range(0,6):
        for nC in range(0,4):
            if aMAPA[nF][nC] == nPiso: #0
                scr.blit(img1,(nPos_X,nPos_Y))
                nPos_X += 64
            if aMAPA[nF][nC] == nObstaculo:
                scr.blit(img2,(nPos_X,nPos_Y))
                nPos_X += 64
        nPos_X = 0
        nPos_Y += 64 
    return

#---------------------------------------------------------------------
# Pinta Politica
#---------------------------------------------------------------------
def Pinta_Poli():
    if lp:
        for nF in range(0,6):
            for nC in range(0,4):
                if aSTATE[nF][nC] != aSTATE[aMETA[1]][aMETA[0]]:
                    if aP[aSTATE[nF][nC]] == 'N':
                        scr.blit(img5,(nC*nSIZE_Pos,nF*nSIZE_Pos))
                    if aP[aSTATE[nF][nC]] == 'S':
                        scr.blit(img6,(nC*nSIZE_Pos,nF*nSIZE_Pos))
                    if aP[aSTATE[nF][nC]] == 'E':
                        scr.blit(img7,(nC*nSIZE_Pos,nF*nSIZE_Pos))
                    if aP[aSTATE[nF][nC]] == 'O':
                        scr.blit(img8,(nC*nSIZE_Pos,nF*nSIZE_Pos))
    return
#---------------------------------------------------------------------
# Pinta Robot 
#---------------------------------------------------------------------

def Pinta_Robot(lr,aPos_R,aP):
    global t_inicio
    global x
    if time.time()-t_inicio >= 1 and time.time()-t_inicio <=2:
        aEstado_actual = aSTATE[aPos_R[1]][aPos_R[0]]
        if aP[aEstado_actual] == "N":
            aux = []
            for i in range(nESTADOS):
                if T1[aEstado_actual][i] != 0.0:
                    for j in range(int(T1[aEstado_actual][i]*100)): aux.append(i)
            nuevo_estado = random.choice(aux)
            for i in range(len(aSTATE)):
                if nuevo_estado in aSTATE[i]:
                    aPos_R[0] = int(aSTATE[i].index(nuevo_estado))
                    aPos_R[1] = i
        if aP[aEstado_actual] == "S":
            aux = []
            for i in range(nESTADOS):
                if T2[aEstado_actual][i] != 0.0:
                    for j in range(int(T2[aEstado_actual][i]*100)): aux.append(i)
            nuevo_estado = random.choice(aux)
            for i in range(len(aSTATE)):
                if nuevo_estado in aSTATE[i]:
                    aPos_R[0] = int(aSTATE[i].index(nuevo_estado))
                    aPos_R[1] = i
        if aP[aEstado_actual] == "E":
            aux = []
            for i in range(nESTADOS):
                if T3[aEstado_actual][i] != 0.0:
                    for j in range(int(T3[aEstado_actual][i]*100)): aux.append(i)
            nuevo_estado = random.choice(aux)
            for i in range(len(aSTATE)):
                if nuevo_estado in aSTATE[i]:
                    aPos_R[0] = int(aSTATE[i].index(nuevo_estado))
                    aPos_R[1] = i
        if aP[aEstado_actual] == "O":
            aux = []
            for i in range(nESTADOS):
                if T4[aEstado_actual][i] != 0.0:
                    for j in range(int(T4[aEstado_actual][i]*100)): aux.append(i)
            nuevo_estado = random.choice(aux)
            for i in range(len(aSTATE)):
                if nuevo_estado in aSTATE[i]:
                    aPos_R[0] = int(aSTATE[i].index(nuevo_estado))
                    aPos_R[1] = i
        t_inicio = time.time()
    
    if lr:
        scr.blit(img4,(64 * aPos_R[0], 64 * aPos_R[1])) # Pinta Cursor.-

    if aPos_R[0] == aMETA[0] and aPos_R[1] == aMETA[1]:
        lr = False
    return
#---------------------------------------------------------------------
#  MAIN.-
#---------------------------------------------------------------------
pygame.init()
scr  = pygame.display.set_mode((256,384)) 


img1 = Load_Image('images/piso.png')
img2 = Load_Image('images/peligro.png')
img3 = Load_Image('images/meta.png')
img4 = Load_Image('images/robot.png',True)

img5 = Load_Image('images/norte.png',True) 
img6 = Load_Image('images/sur.png',True)   
img7 = Load_Image('images/este.png',True) 
img8 = Load_Image('images/oeste.png',True)

Init_VI()

while not lGo:
    cKey = pygame.key.get_pressed()
    Pinta_aMAPA()
    Pinta_Poli()
    Pinta_INI_META()
    Pinta_Robot(lr,aPos_R,aP)
    pygame.display.flip()

    for e in pygame.event.get():

        if e.type == pygame.QUIT:
            lGo = True

        if e.type == pygame.MOUSEMOTION:
            nX_M,nY_M = e.pos          
       
        if cKey[pygame.K_v]:
            #Set_Reward(aSTATE[aMETA[1]][aMETA[0]])
            Value_I()   
            lp =  lp ^ True
            print ("\nRecompensas =")
            print (Rw)
            print ("\nMejor Politica= ")
            print (aP )
            t_inicio = time.time()
            lr = True